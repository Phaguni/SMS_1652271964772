/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
 * DO NOT EDIT THIS FILE!! 
 * 
 *  TO CUSTOMIZE TeachersModelGenerated.js PLEASE EDIT ../TeachersModel.js
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 * 
 */
// Database
import Database from "../../../classes/Database_SMS_db";
import mongoose, { Schema } from "mongoose";

// Logger
import Logger from "../../../classes/Logger";

const generatedModel = {
  /**
   * Init  schema
   */
  init() {
    const db = Database.getConnection();

    /**
      * Teachers
      */
    const teachersSchema = new mongoose.Schema({
      class: {
        type: "Number", 
        required: true
      },
      firstname: {
        type: "String", 
        required: true
      },
      lastname: {
        type: "String", 
        required: true
      },
      middlename: {
        type: "String"
      },
      // RELATIONS
      _Class: {
        type: Schema.ObjectId,
        ref: "Class"
      },
      _Exams: [{
        type: Schema.ObjectId,
        ref: "Exams"
      }],
      
      
      // EXTERNAL RELATIONS
      /*
      _Teachers: [{
        type: Schema.ObjectId,
        ref: "Subjects"
      }],
      _Teachers: [{
        type: Schema.ObjectId,
        ref: "Exams"
      }],
      _Teachers: [{
        type: Schema.ObjectId,
        ref: "Lessons"
      }],
      _Teachers: [{
        type: Schema.ObjectId,
        ref: "Class"
      }],
      _Teachers: [{
        type: Schema.ObjectId,
        ref: "Test"
      }],
      */
    });

    generatedModel.setModel(db.connection.model("Teachers", teachersSchema));

    return teachersSchema;
  },

  /**
   * Set Model
   */
  setModel: model => {
    generatedModel.model = model;
  },

  /**
   * Get model
   */
  getModel: () => {
    return generatedModel.model;
  },

  // Start queries
    

  // CRUD METHODS


  /**
  * TeachersModel.create
  *   @description CRUD ACTION create
  *
  */
  async create(item) {
    const obj = new generatedModel.model(item);
    return await obj.save();
  },
  
  /**
  * TeachersModel.delete
  *   @description CRUD ACTION delete
  *   @param String firstname First Name
  *   @param ObjectId id Id
  *   @param String lastname Last Name
  *
  */
  async delete(id) {
    return await generatedModel.model.findByIdAndRemove(id);
  },
  
  /**
  * TeachersModel.findBy_Class
  *   @description CRUD ACTION findBy_Class
  *   @param Number class Class
  *
  */
  async findBy_Class(key) {
    return await generatedModel.model.find({ '_Class' : key});
  },
  
  /**
  * TeachersModel.findBy_Exams
  *   @description CRUD ACTION findBy_Exams
  *   @param String examname Exam Name
  *
  */
  async findBy_Exams(key) {
    return await generatedModel.model.find({ '_Exams' : key});
  },
  
  /**
  * TeachersModel.findByclass
  *   @description CRUD ACTION findByclass
  *
  */
  async findByclass(key) {
    return await generatedModel.model.find({ 'class' : key});
  },
  
  /**
  * TeachersModel.findByfirstname
  *   @description CRUD ACTION findByfirstname
  *
  */
  async findByfirstname(key) {
    return await generatedModel.model.find({ 'firstname' : key});
  },
  
  /**
  * TeachersModel.findBylastname
  *   @description CRUD ACTION findBylastname
  *
  */
  async findBylastname(key) {
    return await generatedModel.model.find({ 'lastname' : key});
  },
  
  /**
  * TeachersModel.get
  *   @description CRUD ACTION get
  *   @param String firstname First Name
  *   @param ObjectId id Id resource
  *   @param String lastname Last Name
  *
  */
  async get(id) {
    return await generatedModel.model.findOne({ _id : id });
  },
  
  /**
  * TeachersModel.get_Class
  *   @description CRUD ACTION get_Class
  *   @param Number class Class
  *
  */
  async get_Class(id) {
    return await generatedModel.model.findOne({ _id : id}).populate("_Class")
  },
  
  /**
  * TeachersModel.get_Exams
  *   @description CRUD ACTION get_Exams
  *   @param String examname Exam Name
  *
  */
  async get_Exams(id) {
    return await generatedModel.model.findOne({ _id : id}).populate("_Exams")
  },
  
  /**
  * TeachersModel.list
  *   @description CRUD ACTION list
  *
  */
  async list() {
    return await generatedModel.model.find();
  },
  
  /**
  * TeachersModel.update
  *   @description CRUD ACTION update
  *   @param ObjectId id Id
  *
  */
  async update(item) { 
    return await generatedModel.model.findOneAndUpdate({ _id: item._id }, item, {'new': true});
  },
  


};

export default generatedModel;
