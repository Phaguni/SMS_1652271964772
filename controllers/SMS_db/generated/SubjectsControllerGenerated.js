/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
 * DO NOT EDIT THIS FILE!! 
 * 
 *  TO CUSTOMIZE SubjectsControllerGenerated.js PLEASE EDIT ../SubjectsController.js
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 * 
 */
import Properties from "../../../properties";
import SubjectsModel from "../../../models/SMS_db/SubjectsModel";
import ErrorManager from "../../../classes/ErrorManager";
import { authorize } from "../../../security/SecurityManager";
import SubjectsController from "../SubjectsController";

const generatedControllers = {
  /**
   * Init routes
   */
  init: router => {
    const baseUrl = `${Properties.api}/subjects`;
    router.post(baseUrl + "", authorize([]), SubjectsController.create);
    router.delete(baseUrl + "/:id", authorize([]), SubjectsController.delete);
    router.get(baseUrl + "/findBy_Class/:key", authorize([]), SubjectsController.findBy_Class);
    router.get(baseUrl + "/findBy_Teachers/:key", authorize([]), SubjectsController.findBy_Teachers);
    router.get(baseUrl + "/findByclass/:key", authorize([]), SubjectsController.findByclass);
    router.get(baseUrl + "/findByname/:key", authorize([]), SubjectsController.findByname);
    router.get(baseUrl + "/findByteacher/:key", authorize([]), SubjectsController.findByteacher);
    router.get(baseUrl + "/:id", authorize([]), SubjectsController.get);
    router.get(baseUrl + "/:id/get_Class", authorize([]), SubjectsController.get_Class);
    router.get(baseUrl + "/:id/get_Teachers", authorize([]), SubjectsController.get_Teachers);
    router.get(baseUrl + "", authorize([]), SubjectsController.list);
    router.post(baseUrl + "/:id", authorize([]), SubjectsController.update);
  },


  // CRUD METHODS


  /**
  * SubjectsModel.create
  *   @description CRUD ACTION create
  *
  */
  create: async (req, res) => {
    try {
      const result = await SubjectsModel.create(req.body);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * SubjectsModel.delete
  *   @description CRUD ACTION delete
  *   @param ObjectId id Id
  *   @param String name Name
  *
  */
  delete: async (req, res) => {
    try {
      const result = await SubjectsModel.delete(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * SubjectsModel.findBy_Class
  *   @description CRUD ACTION findBy_Class
  *   @param Number class Class
  *
  */
  findBy_Class: async (req, res) => {
    try {
      const result = await SubjectsModel.findBy_Class(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * SubjectsModel.findBy_Teachers
  *   @description CRUD ACTION findBy_Teachers
  *   @param String firstname First Name
  *   @param String lastname Last Name
  *
  */
  findBy_Teachers: async (req, res) => {
    try {
      const result = await SubjectsModel.findBy_Teachers(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * SubjectsModel.findByclass
  *   @description CRUD ACTION findByclass
  *
  */
  findByclass: async (req, res) => {
    try {
      const result = await SubjectsModel.findByclass(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * SubjectsModel.findByname
  *   @description CRUD ACTION findByname
  *
  */
  findByname: async (req, res) => {
    try {
      const result = await SubjectsModel.findByname(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * SubjectsModel.findByteacher
  *   @description CRUD ACTION findByteacher
  *
  */
  findByteacher: async (req, res) => {
    try {
      const result = await SubjectsModel.findByteacher(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * SubjectsModel.get
  *   @description CRUD ACTION get
  *   @param ObjectId id Id resource
  *   @param String name Name
  *
  */
  get: async (req, res) => {
    try {
      const result = await SubjectsModel.get(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * SubjectsModel.get_Class
  *   @description CRUD ACTION get_Class
  *   @param Number class Class
  *
  */
  get_Class: async (req, res) => {
    try {
      const result = await SubjectsModel.get_Class(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * SubjectsModel.get_Teachers
  *   @description CRUD ACTION get_Teachers
  *
  */
  get_Teachers: async (req, res) => {
    try {
      const result = await SubjectsModel.get_Teachers(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * SubjectsModel.list
  *   @description CRUD ACTION list
  *
  */
  list: async (req, res) => {
    try {
      const result = await SubjectsModel.list();
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  
  /**
  * SubjectsModel.update
  *   @description CRUD ACTION update
  *   @param ObjectId id Id
  *   @param String name Name
  *
  */
  update: async (req, res) => {
    try {
      const result = await SubjectsModel.update(req.body);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  
  // Custom APIs

};

export default generatedControllers;
