/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
 * DO NOT EDIT THIS FILE!! 
 * 
 *  TO CUSTOMIZE ExamsControllerGenerated.js PLEASE EDIT ../ExamsController.js
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 * 
 */
import Properties from "../../../properties";
import ExamsModel from "../../../models/SMS_db/ExamsModel";
import ErrorManager from "../../../classes/ErrorManager";
import { authorize } from "../../../security/SecurityManager";
import ExamsController from "../ExamsController";

const generatedControllers = {
  /**
   * Init routes
   */
  init: router => {
    const baseUrl = `${Properties.api}/exams`;
    router.post(baseUrl + "", authorize([]), ExamsController.create);
    router.delete(baseUrl + "/:id", authorize([]), ExamsController.delete);
    router.get(baseUrl + "/findBy_Class/:key", authorize([]), ExamsController.findBy_Class);
    router.get(baseUrl + "/findByclass/:key", authorize([]), ExamsController.findByclass);
    router.get(baseUrl + "/findBydate/:key", authorize([]), ExamsController.findBydate);
    router.get(baseUrl + "/findBydone/:key", authorize([]), ExamsController.findBydone);
    router.get(baseUrl + "/findByexamname/:key", authorize([]), ExamsController.findByexamname);
    router.get(baseUrl + "/findByroomno/:key", authorize([]), ExamsController.findByroomno);
    router.get(baseUrl + "/findBysession/:key", authorize([]), ExamsController.findBysession);
    router.get(baseUrl + "/findBysubjectname/:key", authorize([]), ExamsController.findBysubjectname);
    router.get(baseUrl + "/:id", authorize([]), ExamsController.get);
    router.get(baseUrl + "/:id/get_Teachers", authorize([]), ExamsController.get_Teachers);
    router.get(baseUrl + "", authorize([]), ExamsController.list);
    router.post(baseUrl + "/:id", authorize([]), ExamsController.update);
  },


  // CRUD METHODS


  /**
  * ExamsModel.create
  *   @description CRUD ACTION create
  *
  */
  create: async (req, res) => {
    try {
      const result = await ExamsModel.create(req.body);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * ExamsModel.delete
  *   @description CRUD ACTION delete
  *   @param ObjectId id Id
  *   @param String subjectname Subject Name
  *
  */
  delete: async (req, res) => {
    try {
      const result = await ExamsModel.delete(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * ExamsModel.findBy_Class
  *   @description CRUD ACTION findBy_Class
  *   @param Objectid key Id of model to search for
  *
  */
  findBy_Class: async (req, res) => {
    try {
      const result = await ExamsModel.findBy_Class(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * ExamsModel.findByclass
  *   @description CRUD ACTION findByclass
  *
  */
  findByclass: async (req, res) => {
    try {
      const result = await ExamsModel.findByclass(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * ExamsModel.findBydate
  *   @description CRUD ACTION findBydate
  *
  */
  findBydate: async (req, res) => {
    try {
      const result = await ExamsModel.findBydate(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * ExamsModel.findBydone
  *   @description CRUD ACTION findBydone
  *
  */
  findBydone: async (req, res) => {
    try {
      const result = await ExamsModel.findBydone(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * ExamsModel.findByexamname
  *   @description CRUD ACTION findByexamname
  *
  */
  findByexamname: async (req, res) => {
    try {
      const result = await ExamsModel.findByexamname(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * ExamsModel.findByroomno
  *   @description CRUD ACTION findByroomno
  *
  */
  findByroomno: async (req, res) => {
    try {
      const result = await ExamsModel.findByroomno(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * ExamsModel.findBysession
  *   @description CRUD ACTION findBysession
  *
  */
  findBysession: async (req, res) => {
    try {
      const result = await ExamsModel.findBysession(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * ExamsModel.findBysubjectname
  *   @description CRUD ACTION findBysubjectname
  *
  */
  findBysubjectname: async (req, res) => {
    try {
      const result = await ExamsModel.findBysubjectname(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * ExamsModel.get
  *   @description CRUD ACTION get
  *   @param ObjectId id Id resource
  *   @param String subjectname Subject Name
  *
  */
  get: async (req, res) => {
    try {
      const result = await ExamsModel.get(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * ExamsModel.get_Teachers
  *   @description CRUD ACTION get_Teachers
  *
  */
  get_Teachers: async (req, res) => {
    try {
      const result = await ExamsModel.get_Teachers(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * ExamsModel.list
  *   @description CRUD ACTION list
  *
  */
  list: async (req, res) => {
    try {
      const result = await ExamsModel.list();
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  
  /**
  * ExamsModel.update
  *   @description CRUD ACTION update
  *   @param ObjectId id Id
  *   @param String subjectname Subject Name
  *
  */
  update: async (req, res) => {
    try {
      const result = await ExamsModel.update(req.body);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  
  // Custom APIs

};

export default generatedControllers;
