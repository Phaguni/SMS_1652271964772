/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
 * DO NOT EDIT THIS FILE!! 
 * 
 *  TO CUSTOMIZE LessonsControllerGenerated.js PLEASE EDIT ../LessonsController.js
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 * 
 */
import Properties from "../../../properties";
import LessonsModel from "../../../models/SMS_db/LessonsModel";
import ErrorManager from "../../../classes/ErrorManager";
import { authorize } from "../../../security/SecurityManager";
import LessonsController from "../LessonsController";

const generatedControllers = {
  /**
   * Init routes
   */
  init: router => {
    const baseUrl = `${Properties.api}/lessons`;
    router.post(baseUrl + "", authorize([]), LessonsController.create);
    router.delete(baseUrl + "/:id", authorize([]), LessonsController.delete);
    router.get(baseUrl + "/findBy_Subjects/:key", authorize([]), LessonsController.findBy_Subjects);
    router.get(baseUrl + "/findBy_Teachers/:key", authorize([]), LessonsController.findBy_Teachers);
    router.get(baseUrl + "/findByassignment/:key", authorize([]), LessonsController.findByassignment);
    router.get(baseUrl + "/findByclass/:key", authorize([]), LessonsController.findByclass);
    router.get(baseUrl + "/findBydone/:key", authorize([]), LessonsController.findBydone);
    router.get(baseUrl + "/findBylessonname/:key", authorize([]), LessonsController.findBylessonname);
    router.get(baseUrl + "/findBylessonno/:key", authorize([]), LessonsController.findBylessonno);
    router.get(baseUrl + "/findBysubject/:key", authorize([]), LessonsController.findBysubject);
    router.get(baseUrl + "/findByteacher/:key", authorize([]), LessonsController.findByteacher);
    router.get(baseUrl + "/findBytest/:key", authorize([]), LessonsController.findBytest);
    router.get(baseUrl + "/:id", authorize([]), LessonsController.get);
    router.get(baseUrl + "/:id/get_Subjects", authorize([]), LessonsController.get_Subjects);
    router.get(baseUrl + "/:id/get_Teachers", authorize([]), LessonsController.get_Teachers);
    router.get(baseUrl + "", authorize([]), LessonsController.list);
    router.post(baseUrl + "/:id", authorize([]), LessonsController.update);
  },


  // CRUD METHODS


  /**
  * LessonsModel.create
  *   @description CRUD ACTION create
  *
  */
  create: async (req, res) => {
    try {
      const result = await LessonsModel.create(req.body);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * LessonsModel.delete
  *   @description CRUD ACTION delete
  *   @param ObjectId id Id
  *
  */
  delete: async (req, res) => {
    try {
      const result = await LessonsModel.delete(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * LessonsModel.findBy_Subjects
  *   @description CRUD ACTION findBy_Subjects
  *   @param String name Name of Subject
  *
  */
  findBy_Subjects: async (req, res) => {
    try {
      const result = await LessonsModel.findBy_Subjects(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * LessonsModel.findBy_Teachers
  *   @description CRUD ACTION findBy_Teachers
  *   @param String firstname First Name
  *   @param String lastname Last Name
  *
  */
  findBy_Teachers: async (req, res) => {
    try {
      const result = await LessonsModel.findBy_Teachers(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * LessonsModel.findByassignment
  *   @description CRUD ACTION findByassignment
  *
  */
  findByassignment: async (req, res) => {
    try {
      const result = await LessonsModel.findByassignment(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * LessonsModel.findByclass
  *   @description CRUD ACTION findByclass
  *
  */
  findByclass: async (req, res) => {
    try {
      const result = await LessonsModel.findByclass(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * LessonsModel.findBydone
  *   @description CRUD ACTION findBydone
  *
  */
  findBydone: async (req, res) => {
    try {
      const result = await LessonsModel.findBydone(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * LessonsModel.findBylessonname
  *   @description CRUD ACTION findBylessonname
  *
  */
  findBylessonname: async (req, res) => {
    try {
      const result = await LessonsModel.findBylessonname(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * LessonsModel.findBylessonno
  *   @description CRUD ACTION findBylessonno
  *
  */
  findBylessonno: async (req, res) => {
    try {
      const result = await LessonsModel.findBylessonno(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * LessonsModel.findBysubject
  *   @description CRUD ACTION findBysubject
  *
  */
  findBysubject: async (req, res) => {
    try {
      const result = await LessonsModel.findBysubject(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * LessonsModel.findByteacher
  *   @description CRUD ACTION findByteacher
  *
  */
  findByteacher: async (req, res) => {
    try {
      const result = await LessonsModel.findByteacher(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * LessonsModel.findBytest
  *   @description CRUD ACTION findBytest
  *
  */
  findBytest: async (req, res) => {
    try {
      const result = await LessonsModel.findBytest(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * LessonsModel.get
  *   @description CRUD ACTION get
  *   @param ObjectId id Id resource
  *
  */
  get: async (req, res) => {
    try {
      const result = await LessonsModel.get(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * LessonsModel.get_Subjects
  *   @description CRUD ACTION get_Subjects
  *   @param String name Subject Name
  *
  */
  get_Subjects: async (req, res) => {
    try {
      const result = await LessonsModel.get_Subjects(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * LessonsModel.get_Teachers
  *   @description CRUD ACTION get_Teachers
  *
  */
  get_Teachers: async (req, res) => {
    try {
      const result = await LessonsModel.get_Teachers(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * LessonsModel.list
  *   @description CRUD ACTION list
  *
  */
  list: async (req, res) => {
    try {
      const result = await LessonsModel.list();
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  
  /**
  * LessonsModel.update
  *   @description CRUD ACTION update
  *   @param ObjectId id Id
  *
  */
  update: async (req, res) => {
    try {
      const result = await LessonsModel.update(req.body);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  
  // Custom APIs

};

export default generatedControllers;
